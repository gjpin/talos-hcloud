apiVersion: v1
kind: Namespace
metadata:
  name: examples
  labels:
    name: examples
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: getting-started
  namespace: examples
spec:
  selector:
    matchLabels:
      app: getting-started
  template:
    metadata:
      labels:
        app: getting-started
    spec:
      containers:
      - name: getting-started
        image: docker/getting-started:latest
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: getting-started
  namespace: examples
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: getting-started
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: getting-started
  namespace: examples
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    # external-dns.alpha.kubernetes.io/hostname: "getting-started.apps.BASE_DOMAIN"
    # external-dns.alpha.kubernetes.io/ttl: "120"
    # external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
spec:
  tls:
  - hosts:
    - getting-started.apps.BASE_DOMAIN
    secretName: getting-started-tls
  rules:
  - host: getting-started.apps.BASE_DOMAIN
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: getting-started
            port:
              number: 80
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: http-requests-cpu-ram-usage
  namespace: examples
  labels:
    deploymentName: getting-started
spec:
  scaleTargetRef:
    kind: Deployment
    name: getting-started
  pollingInterval: 5
  minReplicaCount: 0
  maxReplicaCount: 1
  advanced:                                 
    restoreToOriginalReplicaCount: true
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 100
            periodSeconds: 15
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-server.prometheus
      metricName: nginx_ingress_controller_requests
      threshold: '1'
      query: sum(count_over_time(nginx_ingress_controller_requests{ingress="getting-started"}[1m]))
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-server.prometheus
      metricName: container_cpu_load_average_10s
      threshold: '20'
      query: sum(container_cpu_load_average_10s{namespace="examples",pod=~"getting-started-.*"})